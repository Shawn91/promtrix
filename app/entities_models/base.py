"""
By using SQLModel package, we can use Pydantic for both Entity and Database models.

Base classes are defined in this file and corresponding entities and database models can inherit from these classes,
so they can have common properties and methods and also have their own properties and methods.
"""

from datetime import datetime
from typing import Optional
from uuid import UUID, uuid4

from sqlmodel import Field, SQLModel


class MySQLModel(SQLModel):
    class Config:
        extra = "forbid"


class PromptTemplate(MySQLModel):
    """
    PromptTemplate represents a prompt template that may contain placeholders for variables.
    A plaint text prompt without any placeholders is also supported.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    user: str | None = Field(default=None, description="template for user prompt")
    system: str | None = None  # Store as string, convert to jinja2 Template when needed
    description: Optional[str] = None


class Prompt(MySQLModel):
    """
    Represents a real prompt that can be used to generate a response.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    user: str = Field(description="user prompt")
    system: Optional[str] = Field(default=None, description="system prompt")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the prompt was created"
    )
    token_count: Optional[int] = Field(default=None, description="The number of tokens in the prompt")


# class LLMService(MySQLModel):
#     """
#     LLMService represents a llm model or a LLM-backed service
#     """
#
#     id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)
#     model: str
#     model_provider: Optional[str] = Field(default=None, description="The provider of the llm model. E.g. OpenAI, etc")
#     service_provider: Optional[str] = Field(
#         default=None,
#         description="The provider of the llm service. E.g. OpenRouter, etc",
#     )
#     model_version: Optional[str] = Field(default=None, description="The version of the llm model")
#     api_base: str
#     description: Optional[str] = None
#     # todo: add keys field to store the keys required to access the service
#     # keys: Optional[str] = Field(default=None, description="The keys required to access the service")
#
#     executions: List["Execution"] = Relationship(back_populates="llm_service")
#
#
# class Task(MySQLModel):
#     """
#     Represents a specific problem that needs to be solved.
#     """
#
#     id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)
#     name: str
#     description: str
#
#     executions: List["Execution"] = Relationship(back_populates="task")
#
#
class LLMResponse(MySQLModel):
    """
    Represents a response generated by a llm_service
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    content: str
    role: str = Field(description="user or assistant role. future role may include agent, etc")
    finish_reason: str = Field(description="The reason why the execution finished")
    index: int = Field(description="The index of the response in the list of responses generated by the llm_service")


class Execution(MySQLModel):
    """
    Represents a prompt being sent to a llm_service
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    request_id: str | None = Field(default=None, description="The id of the id provided by the llm service")
    duration: int = Field(description="The duration of the execution in milliseconds")
    cost: Optional[float] = Field(default=None, description="The cost of the execution")
    token_count: int = Field(description="The number of tokens in the response")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the execution was created"
    )

    # todo: add response_format field to store the type of response expected
    # response_format: Optional[dict] = Field(default=None, description="The type of response expected")
    seed: Optional[int] = Field(default=None, description="The seed for the generation")


class ExecutionGroup(MySQLModel):
    """
    Represents a group of Executions that were executed together.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the group was created"
    )
    duration: int = Field(description="The total duration of the group in milliseconds")


class Evaluation(MySQLModel):
    """
    Represents an evaluation of a response/choice of an llm request using a specific method or metric

    WHen a request requires multiple responses/choices (namely when the n parameter is greater than 1),
    each choice is evaluated separately.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    method: str = Field(description="The method or metric used for evaluating the execution")
    score: float = Field(description="The score obtained by the evaluation")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the evaluation was created"
    )
    duration: int = Field(description="The duration of the evaluation in milliseconds")
    cost: Optional[float] = Field(default=None, description="The cost of the evaluation")


#
# class EvaluationGroup(MySQLModel):
#     """
#     Represents a group of Evaluation objects that were performed together.
#     """
#
#     id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)
#     created_at: datetime = Field(description="The date and time when the group was created")
#     duration: int = Field(description="The total duration of the group in milliseconds")
#     cost: Optional[float] = Field(default=None)
#
#     evaluations: List[Evaluation] = Relationship(back_populates="evaluation_group")


#
class DatasetSplit(MySQLModel):
    """
    Contains information about a split of a dataset, e.g. train, test, dev
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    name: str = Field(description="The name of the split, e.g. train, test, dev", index=True)
    size: int = Field(description="The size of the split in bytes")
    count: int = Field(description="The number of examples in the split")


class Dataset(MySQLModel):
    """
    Represents a dataset used for testing or evaluating a model or a prompt
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    raw_dataset_dir: str = Field(description="The path to the directory containing the raw dataset ")
    name: str = Field(
        description="The name of the dataset. If this is a subdataset, just include the name of the subdataset",
        index=True,
    )
    version: str | None = Field(default=None, description="The version of the dataset")
    description: str | None = None
    url: str | None = None
    size: int | None = Field(default=None, description="The size of the dataset in bytes")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the dataset was created"
    )

    # executions: List[Execution] = Relationship(back_populates="dataset")
