"""
By using SQLModel package, we can use Pydantic for both Entity and Database models.

Base classes are defined in this file and corresponding entities and database models can inherit from these classes,
so they can have common properties and methods and also have their own properties and methods.
"""

from datetime import datetime
from typing import Optional
from uuid import UUID, uuid4

from sqlmodel import Field, SQLModel


class MySQLModel(SQLModel, table=False):
    class Config:
        extra = "forbid"


class PromptTemplate(MySQLModel, table=False):
    """
    PromptTemplate represents a prompt template that may contain placeholders for variables.
    A plaint text prompt without any placeholders is also supported.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    user: str | None = Field(default=None, description="template for user prompt")
    system: str | None = None  # Store as string, convert to jinja2 Template when needed
    description: Optional[str] = None


class Prompt(MySQLModel, table=False):
    """
    Represents a real prompt that can be used to generate a response.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    user: str = Field(description="user prompt")
    system: Optional[str] = Field(default=None, description="system prompt")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the prompt was created"
    )
    token_count: Optional[int] = Field(default=None, description="The number of tokens in the prompt")
    expected_response: Optional[str] = None

    def set_token_count(self, token_count: int):
        self.token_count = token_count


class LLMService(MySQLModel, table=False):
    """
    LLMService represents a llm model or a LLM-backed service
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    llm: str
    llm_provider: Optional[str] = Field(default=None, description="The provider of the llm model. E.g. OpenAI, etc")
    service_provider: Optional[str] = Field(
        default=None,
        description="The provider of the llm service. E.g. Amazon, Fireworks, etc",
    )
    service_gateway: Optional[str] = Field(
        default=None,
        description="The gateway used to access the llm service. E.g. OpenRouter, etc",
    )
    llm_version: Optional[str] = Field(default=None, description="The version of the llm model")
    api_endpoint: str = Field(
        description="Currently, litellm is used for service interaction so this should be used for the model "
        "parameter of the 'completion' function of litellm, instead of the actual API endpoint."
    )
    quantization: str | None = Field(default=None, description="The quantization used for the llm model")
    description: Optional[str] = None


class Task(MySQLModel, table=False):
    """
    Represents a specific problem that needs to be solved.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    name: str = Field(description="The name of the task", unique=True)
    description: str | None = None


class LLMResponse(MySQLModel, table=False):
    """
    Represents a response generated by a llm_service
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    content: str
    role: str = Field(description="user or assistant role. future role may include agent, etc")
    finish_reason: str = Field(description="The reason why the llm interaction was finished")
    index: int = Field(description="The index of the response in the list of responses generated by the llm_service")


class LLMInteraction(MySQLModel, table=False):
    """
    Represents a prompt being sent to a llm_service
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    request_id: str | None = Field(default=None, description="The id of the id provided by the llm service")
    duration: int | None = Field(default=None, description="The duration of the interaction in milliseconds")
    cost: Optional[float] = Field(default=None, description="The cost of the interaction")
    token_count: int | None = Field(default=None, description="The number of tokens in the response")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the interaction was created"
    )

    # todo: add response_format field to store the type of response expected
    # response_format: Optional[dict] = Field(default=None, description="The type of response expected")


class LLMInteractionGroup(MySQLModel, table=False):
    """
    Represents a group of LLMInteraction that were executed together.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    name: str = Field(description="The name of the group")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the group was created"
    )
    duration: int | None = Field(default=None, description="The total duration of the group in milliseconds")


class Evaluation(MySQLModel, table=False):
    """
    Represents an evaluation of a response/choice of an llm request using a specific method or metric

    WHen a request requires multiple responses/choices (namely when the n parameter is greater than 1),
    each choice is evaluated separately.
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    method: str = Field(description="The method or metric used for evaluating the LLMInteraction")
    score: float = Field(description="The score obtained by the evaluation")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the evaluation was created"
    )
    duration: int = Field(description="The duration of the evaluation in milliseconds")
    cost: Optional[float] = Field(default=None, description="The cost of the evaluation")


#
# class EvaluationGroup(MySQLModel):
#     """
#     Represents a group of Evaluation objects that were performed together.
#     """
#
#     id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)
#     created_at: datetime = Field(description="The date and time when the group was created")
#     duration: int = Field(description="The total duration of the group in milliseconds")
#     cost: Optional[float] = Field(default=None)
#
#     evaluations: List[Evaluation] = Relationship(back_populates="evaluation_group")


class Dataset(MySQLModel):
    """
    Represents a dataset used for testing or evaluating a model or a prompt
    """

    id: UUID = Field(default_factory=uuid4, primary_key=True)
    name: str = Field(
        description="The name of the dataset. If this is a subdataset, just include the name of the subdataset",
    )
    version: str | None = Field(default=None, description="The version of the dataset")
    description: str | None = None
    url: str | None = None
    size: int | None = Field(default=None, description="The size of the dataset in bytes")
    created_at: datetime = Field(
        default_factory=datetime.now, description="The date and time when the dataset was created"
    )
    is_split: bool = Field(
        default=False, description="True if this dataset is a split of another dataset (e.g., train/test/validation)"
    )
